// <auto-generated />
using System;
using ChalengeAlternativoAlkemy;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ChalengeAlternativoAlkemy.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ChalengeAlternativoAlkemy.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CantidadHabitantes")
                        .HasColumnType("int");

                    b.Property<int?>("ContinentId")
                        .HasColumnType("int");

                    b.Property<string>("Denominacion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SuperficieTotal")
                        .HasColumnType("decimal(20,3)");

                    b.HasKey("Id");

                    b.HasIndex("ContinentId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("ChalengeAlternativoAlkemy.Models.Continent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Denominacion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Continents");
                });

            modelBuilder.Entity("ChalengeAlternativoAlkemy.Models.Icon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Altura")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Denominacion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("Date");

                    b.Property<string>("Historia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Icon");
                });

            modelBuilder.Entity("CityIcon", b =>
                {
                    b.Property<int>("CitiesId")
                        .HasColumnType("int");

                    b.Property<int>("IconsId")
                        .HasColumnType("int");

                    b.HasKey("CitiesId", "IconsId");

                    b.HasIndex("IconsId");

                    b.ToTable("CityIcon");
                });

            modelBuilder.Entity("ChalengeAlternativoAlkemy.Models.City", b =>
                {
                    b.HasOne("ChalengeAlternativoAlkemy.Models.Continent", null)
                        .WithMany("Cities")
                        .HasForeignKey("ContinentId");
                });

            modelBuilder.Entity("CityIcon", b =>
                {
                    b.HasOne("ChalengeAlternativoAlkemy.Models.City", null)
                        .WithMany()
                        .HasForeignKey("CitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChalengeAlternativoAlkemy.Models.Icon", null)
                        .WithMany()
                        .HasForeignKey("IconsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChalengeAlternativoAlkemy.Models.Continent", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
